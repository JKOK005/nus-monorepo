syntax = "proto3";
package message;

// Commons
message nodeOperations {
    enum operation {
        JOIN    = 0; // Denotes operations that happen to a node. A node can either leave or join the cluster.
        REMOVE  = 1;
    }
    operation op = 1;
    nodeProperties node = 2;
}

message logContents {
    uint32 index = 1;
    string signature = 2; // Hash sum of the log for quick comparison of logs
    nodeOperations op = 3;
}

message nodeProperties {
    string address  = 2;
    uint32 port     = 3;
}

// Voting protocol
message RequestForVoteMsg {
    uint32 candidateTerm = 1;
    uint32 logLength = 2;
}

message RequestForVoteReply {
    bool ack = 1;
}

service votingService {
    rpc RequestVote(RequestForVoteMsg) returns (RequestForVoteReply);
}

// Heartbeat protocol
message HeartBeatMsg {
    uint32 latestIndex = 1;
    string signature = 2;
}

message HeartBeatResp {
    bool ack = 1; // If ack = False, we assume that the log is not up to date and will need to synchronize logs.
}

service heartbeatService {
    rpc RequestVote(RequestForVoteMsg) returns (RequestForVoteReply);
}

// Pre-seeding protocol
message InitializationMs {}

message InitializationResp {}

// Log synchronization protocol
message SynchronizeMsg {
    uint32 index = 1;
    string signature = 2;
}

message SynchronizeResp {
    bool ack = 1; // If ack = False, the logs are not synchronized as of received index.
}

message LogOverrideMsg {
    uint32 startIndex = 1; // Starting index to override log file
    repeated logContents payload = 2;
}

message LogOverrideResp {
    bool ack = 1;
}